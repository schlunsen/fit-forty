# Base stage
FROM python:3.12-slim as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PYTHONPATH=/app

# Set work directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Install setuptools first to fix pkg_resources issue
RUN pip install --no-cache-dir setuptools wheel

# Install Python dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Development stage
FROM base as development

# Install Django development server requirements
RUN pip install --no-cache-dir django-debug-toolbar django-extensions

# We don't copy the project files in development mode
# as they will be mounted as a volume

# Create directories for static and media files
RUN mkdir -p /app/static /app/media
RUN chmod -R 755 /app/static /app/media

# Copy entrypoint script
COPY docker/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Expose port
EXPOSE 8000

# Run entrypoint script
ENTRYPOINT ["/entrypoint.sh"]

# Default command is for development mode with the Django development server
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

# Production stage
FROM base as production

# Install production dependencies
RUN pip install --no-cache-dir gunicorn

# Copy project files
COPY backend/ .

# Create directories for static and media files
RUN mkdir -p /app/static /app/media
RUN chmod -R 755 /app/static /app/media

# Create non-root user
RUN groupadd -r django && useradd -r -g django django
RUN chown -R django:django /app

# Switch to non-root user
USER django

# Expose port
EXPOSE 8000

# Default command for production
CMD ["gunicorn", "workout_backend.wsgi:application", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120"]