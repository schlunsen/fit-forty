services:
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=workout_db
      - POSTGRES_USER=workout_user
      - POSTGRES_PASSWORD=${DB_PASSWORD:-workout_password}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U workout_user -d workout_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - workout_network

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
      target: production
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DB_NAME=workout_db
      - DB_USER=workout_user
      - DB_PASSWORD=${DB_PASSWORD:-workout_password}
      - DB_HOST=db
      - DB_PORT=5432
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-fitforty.schlunsen.com,localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://fitforty.schlunsen.com}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      - LOAD_SAMPLE_DATA=${LOAD_SAMPLE_DATA:-False}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-workout_password}
    restart: unless-stopped
    expose:
      - "8000"
    networks:
      - workout_network
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             if [ \"$$DJANGO_SUPERUSER_USERNAME\" ] && [ \"$$DJANGO_SUPERUSER_PASSWORD\" ]; then
               python manage.py shell -c \"
               from django.contrib.auth import get_user_model;
               User = get_user_model();
               if not User.objects.filter(username='$$DJANGO_SUPERUSER_USERNAME').exists():
                   User.objects.create_superuser('$$DJANGO_SUPERUSER_USERNAME', '$$DJANGO_SUPERUSER_EMAIL', '$$DJANGO_SUPERUSER_PASSWORD')
               \"
             fi &&
             if [ \"$$LOAD_SAMPLE_DATA\" = \"True\" ]; then
               python manage.py create_sample_exercises
             fi &&
             gunicorn workout_backend.wsgi:application --bind 0.0.0.0:8000 --workers 3 --timeout 120"

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      target: production
    volumes:
      - frontend_dist:/app/dist
    environment:
      - API_BASE_URL=https://fitforty.schlunsen.com/api
      - NODE_ENV=production
    restart: unless-stopped
    networks:
      - workout_network

  app:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/static
      - media_volume:/media
      - frontend_dist:/usr/share/nginx/html
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - workout_network

volumes:
  postgres_data:
  static_volume:
  media_volume:
  frontend_dist:

networks:
  workout_network:
    driver: bridge